                                          (1) PYTHON :

          * Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.
          * python is an interpreted and object - oriented method ,high-level programming language with dynamic semantics.

                                      (2) PYTHON USES :

               * Python can be used on a server to create web applications.
               * software development,
               * mathematics,
               * system scripting.
               * web designing
               * data analysis

                                    (3) PYTHON COMMENTS :

                 * Comments can be used to explain Python code.
                 * Comments can be used to make the code more readable.so, understand to everyone
                 * Comments can be used to prevent execution when testing code in python.
                 * comments starting to be (#).and then python will ignore .
                 * python accept multiple comments line.
                   example:
                   
               (i)        a= 5,109,5
                          print(a)        # the numbers are (int) data type



                        ➪  the # sentences are python are ignored in the program.

                * Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it.
                * it will be considerd (""" to """)

                                       (4) VARIABLES :

             * Variables are containers for storing data values.
              example :
                         a=10        # 10 is data storing value.
                                     # a is a variable.

            * Python has no command for declaring a variable.
            * A variable is created the moment you first assign a value to it.

                                (5) THE VARIABLE ARE FOLLOWING STEPS :

   The Variables do not need to be declared with any particular type, and can even change type after they have been set.

(i) Casting:
    ☞︎︎︎ If you want to specify the data type of a variable, this can be done with casting.
(II) Get the Type:
    ☞︎︎︎ You can get the data type of a variable with the type() function.
(III) Single and double quotes:
    ☞︎︎︎ the string variables can be declared by using ('' or "").
(IV) Case-Sensitive:
      Variable names are case-sensitive.
      example: 
            a=10
            A="antho"   # the variable name are a & A is case - sensitive.

                                     (6) VARIABLE NAME :

               * A variable name  can have a short name (like x and y) or name , place , a to z ...etc,
               * it must be any letters or underscore character...( a=10 or a_anto =5)   # a & a_anto are variable name.

(7) VARIABLES ARE IN MULTI WAYS :
                               there are different ways to variable to defined.
(I) CAMEL CASE :
                 Each word, except the first, starts with a capital letter:
                EXAMPLE:            myVariableName = "ANTO"         # my(V)ariable(N)ame =the first letter else. all are in capital letter.

(II) PASCAL CASE :
                  Each word starts with a capital letter:
                EXAMPLE:            MyVariableName = "anto"         # (M)y(V)ariable(N)ame = the all letter in capital letter.

(III) SNAKE CASE :
                  Each word is separated by an underscore character:
                 EXAMPLE:           my_variable_name = "anto"       # the each word is separated by "_".



 (8) ASSIGN MULTIPLE VALUE :
                              Python allows you to assign values to multiple variables in one line.
                          Example: a,b,c= "anto","aravind","aakash"
                                   print(a,b,c)                     # "anto","aravind","aakash" the assign value in multiple variable.
  
there are in different ways.

(i) One Value to Multiple Variables:
                                          And you can assign the same value to multiple variables in one line.
                                          Example:  x = y = z = "Orange"
                                                   print(x)
                                                   print(y)
                                                   print(z)                    # they are same value "orange" but the variable are dif
(9) OUTPUT VARIABLES :

                    * The Python print() function is often used to output variables.
                    * The print () inside the argument values are ["+" ,"-" , "*" , "/"] whatever operator use to and to get the value. it's will be in numberic type.
                    * And to the value are in character [ "+" , ",'] are using

                    example: (i) x = "Python "
                                 y = "is "
                                 z = "awesome"
                                 print(x + y + z)          # the assign character in "+"       O/P : python is awsome

                              (ii) x = 95
                                   y = 50
                                   print(x - y)            # the assign value to separation     O/P : 45

(10) GLOBAL VARAIABLE :
                       * Variables that are created outside of a function (as in all of the examples above) are known as global variables.
                       * Global variables can be used by everyone, both inside of functions and outside.           
            example: 
                    a = "awesome"                
                    def myfunc():                               # def are used to outsidefunction
                      print("The boy is " + x)
                    myfunc()                                                                 O/p : The boy is awsome.          

                       * If you create a variable with the same name inside a function python accept .
            example: 
                      x = "cute"
                      def myfunc():
                        x = "adorable"                         # In this "x" is variable , in two times in the program
                          print("the baby is " + x)
                      myfunc()
                      print("the flower is " + x)                                                 O/p : the baby is cute
                                                                                                        the flower is adorable.

                                (11) DATA TYPES IN PYTHON :

                            *  In programming, data type is an important concept.
                            *  Variables can store data of different types, and different types can do different things.
                            *  Python has the following data types built-in by default.
The categories are ,

         ☞︎︎︎  Text Type         :	str ( string are text type / example : a= "alex" )

         ☞︎︎︎  Numeric Types     :	int ( just numbers / example : a = 12 ), float ( numbers in points / example: a = 0.12), complex ( numbers with j / example: a = o2j ).

         ☞︎︎︎  Sequence Types    :	list ( list are define in squre bracket / example : a = ["apple"] , tuple ( tuple are defind as round bracket / example : a = ( "apple") ,  range ( range function are the function value is starting & between the function value to calculate / example : a = range 6 , o/p 0,1,2,3,4,5.

         ☞︎︎︎  Mapping Type      :	dict ( dict store data values in key ,value pairs / example a = { "name":"alex"} ) its define as {} .

         ☞︎︎︎  Set Types         :	set ( Sets are used to store multiple items in a single variable / example a= { "ant", "cat" , "dog"} ) set are define {} , frozenset ( Freeze the list, and make it unchangeable  / example: a = { 'apple'}.

         ☞︎︎︎  Boolean Type      :	bool ( Booleans represent one of two values: True or False / example : a = 10 
                                                                                                           print(10) )   o/p ; true.  
                     
         ☞︎︎︎  Binary Types      :	bytes, bytearray, memoryview

         ☞︎︎︎  None Type         :	NoneType


                                        (10)  PYTHON NUMBERS :

 (i)   * there are three type in python.
                           ➪ int         ☞︎︎︎    Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length. ( example: a = 12 )
                           ➪ float       ☞︎︎︎   "Floating point number" is a number, positive or negative, containing one or more decimals  ( example: a = 12.0 )
                           ➪ complex     ☞︎︎︎    Complex numbers are written with a "j" as the imaginary part.  ( example: a = 12j )

(ii) random number : 
                      * Python does not have a random() function to make a random number, 
                        but Python has a built-in module called random that can be used to make random numbers.
example:
         import random
          print(random.randrange(1, 10))     # the random function are choose the value in random from the list.


                             (11) specify a variable type (or) python casting :

                                 There may be times when you want to specify a type on to a variable.
there are 3 type ,
                    ➪ int()
                    ➪ float()
                    ➪ str()

                                          (12) PYHTON STRINGS :

   * Strings in python are surrounded by either single quotation marks, or double quotation marks.
   * 'hello' is the same as "hello".

example: 
       a= "heiii"
       print(a)         O/p: heii

   * You can display a string literal with the print() function.
   * string can assign a multiline string to a variable by using three quotes (""" , """) or three single quotes (''' , ''').

example: 
          a=""" hello everybody this is alex from chennai."""
          print(a)                                            O/p : hello everybody this is alex from chennai.

(i) SLICING STRING :
                *  slicing string are you can return a range of characters by using the slice syntax.
example:
          a=" hiii alex"
          print (a.[1:3])        O/p: iii

                * SLICE FROM THE START : By leaving out the start index, the range will start at the first character

                             exampe:    a="hiii alex"  
                                        print (a.[:3])      O/p: hiii
                
                * SLICE TO THE END : By leaving out the end index, the range will go to the end.

                              example:    a="hiii alex"
                                          print(a.[2:])      O/p : ii alex

                * NEGATIVE INDEXING : Use negative indexes to start the slice from the end of the string.

                              exampe :    a="hiii alex"
                                          print (a.[-3:-1])     O/p: lex

(ii) MODIFY STRING :

                * UPPER CASE : The upper() method returns the string in upper case ( all letter are capitel letter)

                         example:  a="hiii alex"
                                  print(a.upper())         O/p: HIII ALEX

                * LOWER CASE : The lower() method returns the string in lower case ( all letter are small letter).

                         example:   a=("HIII ALEX")
                                    print(a.lower())         O/p: hiii alex

                * REMOVE WHITESPACE : The strip() method removes any whitespace from the beginning or the end.

                         example:   a=("   hiii  alex  ")
                                    print(a.strip())               O/p: hiii alex       # the space are removed.

                * REPLACE STRING : The replace() method replaces a string with another string.

                         example:  a=(" aiii alex") 
                                   print(a.replace("a","h"))        O/p : hiii alex

                * SPLIT STRING : The split() method returns a list where the text between the specified separator becomes the list items. split the value to another another.
 
                         example:  a="hello,alex" 
                                   print(a.split.())      # 'hello','alex'
 
(iii) STRING CONCATENATION : 
                    To concatenate, or combine, two strings you can use the ( + ) operator.
    example :
            a,b into c ?
                            a= "Hiii"
                            b= "Alex"
                            c=a+b
                            print(c)     # O/p : Hiii Alex
(iv) format string :
                   *  the Python Variables chapter, we cannot combine strings and numbers like this.  
                   *  But we can combine strings and numbers by using the format() method  .
                   * {} there are replace the value in format string
 example :
           age = 22                                    # insert the number into string.
           txt = "My name is alex , and I am {}"
           print(txt.format(age))                       # O/p: My name is alex , and I am 22 

(v) ESCAPE CHARACTERS IN STRING :
                             * To insert characters that are illegal in a string, use an escape character
                             * An escape character is a backslash \ followed by the character you want to insert.
  example:
          txt = "We are the so-called "Vikings" from the north."       # there are double quotes invold in 3 , the specify word are mention using \  \.
                       O/p : error.

ESCAPE CHARACTERS ;

            1 .     \'	   Single Quote	  ➪   python to write the string normal , example : it is to change it's . (\') this format used.

            2.      \\	   Backslash	  ➪   txt= "This will insert one \\ (backslash)." to  O/P : " This will insert one \ (backslash).

            3.      \n	   New Line	  ➪   txt = "Hello\nWorld!" to   O/P :  Hello
                                                                                      World!	

            4.      \r	   Carriage Return  ➪   txt = "Hello\rWorld!  to  O/P :  Hello
                                                                                     World!

            5.      \t	   Tab	           ➪   txt = "Hello\tWorld!"  to  O/P : Hello  World       # both letter between spaced.

            6.      \b	   Backspace	  ➪   txt = "Hello \bWorld!" to  O/P : HelloWorld         # both letter between space removed

            7.      \f        Form Feed	  ➪

            8.      \ooo      Octal value	  ➪   txt = "\110\145\154\154\157"   to    O/P : Hello 

            9.      \xhh      Hex value        ➪   txt = "\x48\x65\x6c\x6c\x6f"   to   O/P : Hello


                                       (11) PYTHON BOOLEANS 

    * Booleans represent one of two values: (True) or (False) .
    * The bool() function allows you to evaluate any value, and give you True or False in return.

Example :  (i)                                                                 (ii) 
                print(10 > 9)     # O/p : true                                             x = "Hello"      # O/p : true
                print(10==9)              false                                            y = 15                   true
                 print(10<9)              false                                            print(bool(x))
                                                                                           print(bool(y))

                                     (12) PYTHON OPERATORS  

      *  Operators are used to perform operations on variables and values.
      *  operators in the following groups:
                                           1. Arithmetic operators
                                           2. Assignment operators
                                           3. Comparison operators
                                           4. Logical operators
                                           5. Identity operators
                                           6. Membership operators
                                           7.  Bitwise operators


(1) ARITHMETIC OPERATORS :
                            Arithmetic operators are common mathematic operators.     

example : ( x = 10 , y = 5 )

                                                     o/p

1.  +	Addition	         x + y	 10+5             15
2.  -	Subtraction	x - y	 10-5              5
3.  *	Multiplication	x * y	 10*5             50
4.  /	Division	         x / y	 10/5              2
5.  %	Modulus	         x % y	 10%5              0
6.  **	Exponentiation	x ** y	 10**5            10000              # 10*10*10*10*10
7.  //	Floor division	x // y    10//5             2                 #



(2) PYTHON ASSIGNMENT OPERATORS : 
                                  Assignment operators are used to assign values to variables.
.... X=5

                       Operator	Example	    Same As	       o/P :
                  1.      =	x = 5	     x = 5	        5
                  2.     +=	x += 3	     x = x + 3	        8
                  3.     -=	x -= 3	     x = x - 3	        2
                  4.     *=	x *= 3	     x = x * 3	        15
                  5.     /=	x /= 3	     x = x / 3	        1.666
                  6.     %=	x %= 3	     x = x % 3	        2
                  7.    //=	x //= 3	     x = x // 3	        1
                  8.    **=  	x **= 3	     x = x ** 3	        125
                  9.     &=	x &= 3	     x = x & 3	        1
                  10.    |=	x |= 3	     x = x | 3	        7
                  11.    ^=	x ^= 3	     x = x ^ 3	        6
                  12.    >>=        x >>= 3	     x = x >> 3	        0
                  13.    <<=	x <<= 3	     x = x << 3           40


(3) PYTHON COMPARISON OPERATOR :         
                                 Comparison operators are used to compare two values.

example ( x = 10 , y = 5 )
                
                      Operator	Name	                    Example	O/p :

                         == 	Equal	                     x == y         false    	
                         !=	Not equal	            x != y	true
                         >	         Greater than	            x > y	         true
                         <	         Less than	            x < y	         false
                         >=	Greater than or equal to	   x >= y	true
                         <=	Less than or equal to	   x <= y         false


(4) PYHTON LOGICAL OPERATOR :
                                 Logical operators are used to combine conditional statements.         

 ( X = 5 tO put ....... )

   operator            description                                             example                                     O/p :

1. and 	        Returns True if both statements are true	                 x < 5 and  x < 10	                       true     
2. or	        Returns True if one of the statements is true 	        x < 5 or x < 4	                       true
3. not	        Reverse the result, returns False if the result is true        not(x < 5 and x < 10)o put .....)         false  


(5) PYTHON IDENTIFY OPERATORS :
                                  * python compare the objects, not if they are equal, but if they are actually the same object, 
with the same memory location.


Operator	                               Description	                                           Example	

1.  is 	              Returns True if both variables are the same object	                 x is y	
2.  is not	     Returns True if both variables are not the same object	                 x is not y


(6) PYTHON MEMBERSHIP OPERATORS :
                                     They are used to test if a sequence is presented in an object.


Operator	           Description	                                                                          Example

1.  in 	         Returns True if a sequence with the specified value is present in the object	             x in y	
2.  not in	Returns True if a sequence with the specified value is not present in the object	             x not in y




