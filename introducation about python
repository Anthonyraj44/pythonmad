                                          (1) PYTHON 

          * Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.
          * python is an interpreted and object - oriented method ,high-level programming language with dynamic semantics.

                                       (2) PYTHON USES 

          * Python can be used on a server to create web applications.
          * software development,
          * mathematics,
          * system scripting.
          * web designing
          * data analysis

                                    (3) PYTHON COMMENTS 

          * Comments can be used to explain Python code.
          * Comments can be used to make the code more readable.so, understand to everyone
          * Comments can be used to prevent execution when testing code in python.
          * comments starting to be (#).and then python will ignore .
          * python accept multiple comments line.

                   example:
                   
               (i)        a= 5,109,5
                          print(a)        # the numbers are (int) data type



                        ➪  the # sentences are python are ignored in the program.

            * Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it.
            * it will be considerd (""" to """)

                                    (4) VARIABLES :

             * Variables are containers for storing data values.

              example :
                         a=10        # 10 is data storing value.
                                     # a is a variable.

            * Python has no command for declaring a variable.
            * A variable is created the moment you first assign a value to it.

                                (5) THE VARIABLE ARE FOLLOWING STEPS :

   The Variables do not need to be declared with any particular type, and can even change type after they have been set.

(i) Casting:
    ☞︎︎︎ If you want to specify the data type of a variable, this can be done with casting.

(II) Get the Type:
    ☞︎︎︎ You can get the data type of a variable with the type() function.

(III) Single and double quotes:
    ☞︎︎︎ the string variables can be declared by using ('' or "").

(IV) Case-Sensitive:
      Variable names are case-sensitive.

      example: 
            a=10
            A="antho"   # the variable name are a & A is case - sensitive.

                                     (6) VARIABLE NAME :

          * A variable name  can have a short name (like x and y) or name , place , a to z ...etc,
          * it must be any letters or underscore character...( a=10 or a_anto =5)   # a & a_anto are variable name.

(1) VARIABLES ARE IN MULTI WAYS :
                               there are different ways to variable to defined.
           1. Variable names.
           2. Assign multiple values.
           3. Output variable.
           4. Global variable. 

(1)  VARIABLE NAMES 

(I) CAMEL CASE :  Each word, except the first, starts with a capital letter.

                EXAMPLE:            myVariableName = "ANTO"         # my(V)ariable(N)ame =the first letter else. all are in capital letter.

(II) PASCAL CASE :  Each word starts with a capital letter.

                EXAMPLE:            MyVariableName = "anto"         # (M)y(V)ariable(N)ame = the all letter in capital letter.

(III) SNAKE CASE :   Each word is separated by an underscore character.

                 EXAMPLE:           my_variable_name = "anto"       # the each word is separated by "_".



 (2) ASSIGN MULTIPLE VALUE :  Python allows you to assign values to multiple variables in one line.

                          Example: a,b,c= "anto","aravind","aakash"
                                   print(a,b,c)                     # "anto","aravind","aakash" the assign value in multiple variable.
  
there are in different ways.

(i) One Value to Multiple Variables:  And you can assign the same value to multiple variables in one line.

                                          Example:  x = y = z = "Orange"
                                                   print(x)
                                                   print(y)
                                                   print(z)                    # they are same value "orange" but the variable are dif
(3) OUTPUT VARIABLES :
                    * The Python print() function is often used to output variables.
                    * The print () inside the argument values are ["+" ,"-" , "*" , "/"] whatever operator use to and to get the value. it's will be in numberic type.
                    * And to the value are in character [ "+" , ",'] are using

                    example: (i) x = "Python "
                                 y = "is "
                                 z = "awesome"
                                 print(x + y + z)          # the assign character in "+"       O/P : python is awsome

                              (ii) x = 95
                                   y = 50
                                   print(x - y)            # the assign value to separation     O/P : 45

(4) GLOBAL VARAIABLE :
                       * Variables that are created outside of a function (as in all of the examples above) are known as global variables.
                       * Global variables can be used by everyone, both inside of functions and outside.           
            eExample: 
                    a = "awesome"                
                    def myfunc():                               # def are used to outsidefunction
                      print("The boy is " + x)
                    myfunc()                                                                 O/p : The boy is awsome.          

                       * If you create a variable with the same name inside a function python accept .
            example: 
                      x = "cute"
                      def myfunc():
                        x = "adorable"                         # In this "x" is variable , in two times in the program
                          print("the baby is " + x)
                      myfunc()
                      print("the flower is " + x)                                                 O/p : the baby is cute
                                                                                                        the flower is adorable.

                            (7) DATA TYPES IN PYTHON :

                   *  In programming, data type is an important concept.
                   *  Variables can store data of different types, and different types can do different things.
                   *  Python has the following data types built-in by default.
The categories are ,

         ☞︎︎︎  Text Type         :	str ( string are text type / example : a= "alex" )

         ☞︎︎︎  Numeric Types     :	int ( just numbers / example : a = 12 ), float ( numbers in points / example: a = 0.12), complex ( numbers with j / example: a = o2j ).

         ☞︎︎︎  Sequence Types    :	list ( list are define in squre bracket / example : a = ["apple"] , tuple ( tuple are defind as round bracket / example : a = ( "apple") ,  range ( range function are the function value is starting & between the function value to calculate / example : a = range 6 , o/p 0,1,2,3,4,5.

         ☞︎︎︎  Mapping Type      :	dict ( dict store data values in key ,value pairs / example a = { "name":"alex"} ) its define as {} .

         ☞︎︎︎  Set Types         :	set ( Sets are used to store multiple items in a single variable / example a= { "ant", "cat" , "dog"} ) set are define {} , frozenset ( Freeze the list, and make it unchangeable  / example: a = { 'apple'}.

         ☞︎︎︎  Boolean Type      :	bool ( Booleans represent one of two values: True or False / example : a = 10 
                                                                                                           print(10) )   o/p ; true.  
         ☞︎︎︎  Binary Types      :	bytes, bytearray, memoryview

         ☞︎︎︎  None Type         :	NoneType


                                        (8)  PYTHON NUMBERS :

 (i)   there are three type in python.

                           ➪ int         ☞︎︎︎    Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length. ( example: a = 12 )
                           ➪ float       ☞︎︎︎   "Floating point number" is a number, positive or negative, containing one or more decimals  ( example: a = 12.0 )
                           ➪ complex     ☞︎︎︎    Complex numbers are written with a "j" as the imaginary part.  ( example: a = 12j )

(ii) random number : 
                      * Python does not have a random() function to make a random number, 
                        but Python has a built-in module called random that can be used to make random numbers.
example:
         import random
          print(random.randrange(1, 10))     # the random function are choose the value in random from the list.


                             (9) PYTHON CASTING  :

                                 There may be times when you want to specify a type on to a variable.
there are 3 type ,
                    ➪ int()
                    ➪ float()
                    ➪ str()

                            (10) PYHTON STRINGS :

   * Strings in python are surrounded by either single quotation marks, or double quotation marks.
   * 'hello' is the same as "hello".

example: 
       a= "heiii"
       print(a)         O/p: heii

   * You can display a string literal with the print() function.
   * string can assign a multiline string to a variable by using three quotes (""" , """) or three single quotes (''' , ''').

example: 
          a=""" hello everybody this is alex from chennai."""
          print(a)                                            O/p : hello everybody this is alex from chennai.

(i) SLICING STRING :
                *  slicing string are you can return a range of characters by using the slice syntax.
example:
          a=" hiii alex"
          print (a.[1:3])        O/p: iii

                * SLICE FROM THE START : By leaving out the start index, the range will start at the first character

                             exampe:    a="hiii alex"  
                                        print (a.[:3])      O/p: hiii
                
                * SLICE TO THE END : By leaving out the end index, the range will go to the end.

                              example:    a="hiii alex"
                                          print(a.[2:])      O/p : ii alex

                * NEGATIVE INDEXING : Use negative indexes to start the slice from the end of the string.

                              exampe :    a="hiii alex"
                                          print (a.[-3:-1])     O/p: lex

(ii) MODIFY STRING :

                * UPPER CASE : The upper() method returns the string in upper case ( all letter are capitel letter)

                         example:  a="hiii alex"
                                  print(a.upper())         O/p: HIII ALEX

                * LOWER CASE : The lower() method returns the string in lower case ( all letter are small letter).

                         example:   a=("HIII ALEX")
                                    print(a.lower())         O/p: hiii alex

                * REMOVE WHITESPACE : The strip() method removes any whitespace from the beginning or the end.

                         example:   a=("   hiii  alex  ")
                                    print(a.strip())               O/p: hiii alex       # the space are removed.

                * REPLACE STRING : The replace() method replaces a string with another string.

                         example:  a=(" aiii alex") 
                                   print(a.replace("a","h"))        O/p : hiii alex

                * SPLIT STRING : The split() method returns a list where the text between the specified separator becomes the list items. split the value to another another.
 
                         example:  a="hello,alex" 
                                   print(a.split.())      # 'hello','alex'
 
(iii) STRING CONCATENATION : 
                    To concatenate, or combine, two strings you can use the ( + ) operator.
    example :
            a,b into c ?
                            a= "Hiii"
                            b= "Alex"
                            c=a+b
                            print(c)     # O/p : Hiii Alex
(iv) format string :
                   *  the Python Variables chapter, we cannot combine strings and numbers like this.  
                   *  But we can combine strings and numbers by using the format() method  .
                   * {} there are replace the value in format string
 example :
           age = 22                                    # insert the number into string.
           txt = "My name is alex , and I am {}"
           print(txt.format(age))                       # O/p: My name is alex , and I am 22 

(v) ESCAPE CHARACTERS IN STRING :
                             * To insert characters that are illegal in a string, use an escape character
                             * An escape character is a backslash \ followed by the character you want to insert.
  example:
          txt = "We are the so-called "Vikings" from the north."       # there are double quotes invold in 3 , the specify word are mention using \  \.
                       O/p : error.

ESCAPE CHARACTERS ;

            1 .     \'	   Single Quote	       ➪       python to write the string normal , example : it is to change it's . (\') this format used.

            2.      \\	   Backslash	         ➪        txt= "This will insert one \\ (backslash)." to  O/P : " This will insert one \ (backslash).

            3.      \n	   New Line	           ➪         txt = "Hello\nWorld!" to   O/P :  Hello
                                                                                            World!	

            4.      \r	  Carriage Return      ➪         txt = "Hello\rWorld!  to  O/P :  Hello
                                                                                           World!

            5.      \t	   Tab	              ➪         txt = "Hello\tWorld!"  to  O/P : Hello  World       # both letter between spaced.

            6.      \b	   Backspace	        ➪        txt = "Hello \bWorld!" to  O/P : HelloWorld         # both letter between space removed

            7.      \f        Form Feed	      ➪

            8.      \ooo      Octal value	    ➪        txt = "\110\145\154\154\157"   to    O/P : Hello 

            9.      \xhh      Hex value       ➪        txt = "\x48\x65\x6c\x6c\x6f"   to   O/P : Hello


                                       (11) PYTHON BOOLEANS 

    * Booleans represent one of two values: (True) or (False) .
    * The bool() function allows you to evaluate any value, and give you True or False in return.

Example :  (i)                                                                 (ii) 
                print(10 > 9)     # O/p : true                                             x = "Hello"      # O/p : true
                print(10==9)              false                                            y = 15                   true
                 print(10<9)              false                                            print(bool(x))
                                                                                           print(bool(y))

                                     (12) PYTHON OPERATORS  

      *  Operators are used to perform operations on variables and values.
      *  operators in the following groups:
                                           1. Arithmetic operators
                                           2. Assignment operators
                                           3. Comparison operators
                                           4. Logical operators
                                           5. Identity operators
                                           6. Membership operators
                                           7.  Bitwise operators


(1) ARITHMETIC OPERATORS :
                            Arithmetic operators are common mathematic operators.     

example : ( x = 10 , y = 5 )

                                                     o/p

1.  +	Addition	         x + y	   10+5             15
2.  -	Subtraction	       x - y	   10-5              5
3.  *	Multiplication	   x * y	   10*5             50
4.  /	Division	         x / y	   10/5              2
5.  %	Modulus	           x % y	   10%5              0
6.  **	Exponentiation	 x ** y	   10**5            10000              # 10*10*10*10*10
7.  //	Floor division	 x // y    10//5             2                 #



(2) PYTHON ASSIGNMENT OPERATORS : 
                                  Assignment operators are used to assign values to variables.
.... X=5

                        Operator		      Same As	        o/P :

                  1.      =	x = 5	        x = 5	            5
                  2.     +=	x += 3	     x = x + 3	        8
                  3.     -=	x -= 3	     x = x - 3	        2
                  4.     *=	x *= 3	     x = x * 3	        15
                  5.     /=	x /= 3	     x = x / 3	        1.666
                  6.     %=	x %= 3	     x = x % 3	        2
                  7.    //=	x //= 3	     x = x // 3	        1
                  8.    **=  	x **= 3	   x = x ** 3	        125
                  9.     &=	x &= 3	     x = x & 3	        1
                  10.    |=	x |= 3	     x = x | 3	        7
                  11.    ^=	x ^= 3	     x = x ^ 3	        6
                  12.    >>=x >>= 3	     x = x >> 3	        0
                  13.    <<=	x <<= 3	   x = x << 3         40


(3) PYTHON COMPARISON OPERATOR :         
                                 Comparison operators are used to compare two values.

example ( x = 10 , y = 5 )
                
                      Operator	Name	                    Example	O/p :

                         == 	Equal	                     x == y         false    	
                         !=	Not equal	            x != y	true
                         >	         Greater than	            x > y	         true
                         <	         Less than	            x < y	         false
                         >=	Greater than or equal to	   x >= y	true
                         <=	Less than or equal to	   x <= y         false


(4) PYHTON LOGICAL OPERATOR :
                                 Logical operators are used to combine conditional statements.         

 ( X = 5 tO put ....... )

   operator            description                                             example                                     O/p :

1. and 	        Returns True if both statements are true	                 x < 5 and  x < 10	                       true     
2. or	        Returns True if one of the statements is true 	        x < 5 or x < 4	                       true
3. not	        Reverse the result, returns False if the result is true        not(x < 5 and x < 10)o put .....)         false  


(5) PYTHON IDENTIFY OPERATORS :
                                  * python compare the objects, not if they are equal, but if they are actually the same object, 
with the same memory location.


Operator	                               Description	                                           Example	

1.  is 	              Returns True if both variables are the same object	                       x is y	
2.  is not	          Returns True if both variables are not the same object	                 x is not y


(6) PYTHON MEMBERSHIP OPERATORS :
                                     They are used to test if a sequence is presented in an object.


Operator	           Description	                                                                            Example

1.  in 	         Returns True if a sequence with the specified value is present in the object	                 x in y	
2.  not in	     Returns True if a sequence with the specified value is not present in the object	             x not in y



                             (13) PYTHON LIST

   * Lists are used to store multiple items in a single variable .
   * Lists are created using square brackets [] .
   * List items are , * ordered * changeable * allow all dublicate value. 

Examble :
        thislist = ["apple", "banana", "cherry", "apple", "cherry"]      # two apple are in the list .

   * LIST LENGTH : To determine how many items a list has, use the len() function .

Example : 
           thislist = ["apple", "banana", "cherry"]
           print(len(thislist))                              # O/p : 3

   * List items can be of any data type ( string , int , boolen )
   * From Python's perspective, lists are defined as objects with the data type 'list' .....< class.type>

(1) ACCESS LIST :
           
       * ACCESS ITEMS : you can access them by referring to the index number . example :     thislist = ["apple", "banana", "cherry"]
                                                                                             print(thislist[1])        O/p : banana 

       * NEGATIVE INDEXING : Negative indexing means start from the end . (-1 refers to the last item). example :   thislist = ["apple", "banana", "cherry"]
                                                                                                                    print(thislist[-1])    O/p : cherry 

       * RANGE OF INDEXING : The specifying where to start and where to end the range .the return value will be a new list with the specified items.
                       example :   thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
                                   print(thislist[2:5])           O/p : [ "cherry", "orange", "kiwi" ]
       *    it also [-5:-1]  type mode use.


(2) CHANGE LIST ITEMS : 
                      *    To change the value of a specific item, refer to the index number .
 example : 
            thislist = ["apple", "banana", "cherry"]
            thislist[1] = "blackcurrant"
            print(thislist)                              #O/p : ["apple", "blackcurrant", "cherry"]
 
              
                     * To insert a new list item, without replacing any of the existing values, we can use the insert() method.

(3)  ADD LIST ITEMS : To add an item to the end of the list, use the append() method . Example : thislist = ["apple", "banana", "cherry"]
                                                                                                 thislist.append("orange")
                                                                                                 print(thislist)                   O/p :["orange","apple", "banana", "cherry"] 
* INSERT ITEMS : To insert a list item at a specified index, use the insert() method.
* EXTEND LIST : To append elements from another list to the current list, use the extend() method.
 
(4) REMOVE ITEMS : 
                    The remove() method removes the specified item.
 Example : 
            thislist = ["apple", "banana", "cherry"]
            thislist.remove("banana")
            print(thislist)               O/p : ["apple", "cherry"]
                  
  * REMOVE SPECIFIED INDEX : The pop() method removes the specified index . The del keyword also removes the specified index .
  * CLEAR THE LIST : The clear() method empties the list. The list still remains, but it has no content.
  * LOOP LIST : You can loop through the list items by using a ( for loop ) . You can loop through the list items by using a ( while loop ).

(5) SORT LIST : List objects have a sort() method that will sort the list alphanumerically, ascending, by default .

              Example :    thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
                           thislist.sort()
                           print(thislist)            # O/p :  ['banana', 'kiwi', 'mango', 'orange', 'pineapple'] ....the list are alphabaticly arranged.
 *  REVERSE ORDER : The reverse() method reverses the current sorting order of the elements , to reverse the order of a list, regardless of the alphabet .

(6)  COPY LIST : You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, 
                 and changes made in list1 will automatically also be made in list2.

(7) LIST JOIN :     *  There are several ways to join, or concatenate, two or more lists in Python.
                       One of the easiest ways are by using the + operator .
                    *  Or you can use the extend() method .

 LIST METHOD :

               Method	               Description

               append()	          Adds an element at the end of the list.

               clear()	          Removes all the elements from the list.

               copy()	            Returns a copy of the list.

               count()	          Returns the number of elements with the specified value.

               extend()	          Add the elements of a list (or any iterable), to the end of the current list.

               index()	          Returns the index of the first element with the specified value.

               insert()	          Adds an element at the specified position.

               pop()	            Removes the element at the specified position.

               remove()	          Removes the item with the specified value.

               reverse()	        Reverses the order of the list.

               sort()	            Sorts the list.



                           (14) PYTHON TUPLE 

*  Tuples are used to store multiple items in a single variable .
*  A tuple is a collection which is ordered and unchangeable.
*  Tuples are written with round brackets. (...).
*  Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage .
*  Tuple items are ordered, unchangeable, and allow duplicate values.

       Example : 
                      thistuple = ("apple", "banana", "cherry")
                      print(thistuple)                               # O/p : ('apple', 'banana', 'cherry')  
  

                          (15) PYHTON SET 

*  Sets are used to store multiple items in a single variable .
*  A set is a collection which is unordered, unchangeable*, and unindexed .
*  Sets are written with curly brackets .

      Example :   thisset = {"apple", "banana", "cherry"}
                  print(thisset)                     O/p : {'banana', 'apple', 'cherry'}


SET METHODS : 

   
Method	                                      Description

add()	                                  Adds an element to the set.

clear()	                                Removes all the elements from the set.

copy()	                                Returns a copy of the set.

difference()	                          Returns a set containing the difference between two or more sets.

difference_update()	                    Removes the items in this set that are also included in another, specified set.

discard()	                              Remove the specified item.

intersection()	                        Returns a set, that is the intersection of two other sets.

intersection_update()	                  Removes the items in this set that are not present in other, specified set(s).

isdisjoint()	                          Returns whether two sets have a intersection or not.

issubset()	                            Returns whether another set contains this set or not.

issuperset()	                          Returns whether this set contains another set or not.

pop()	                                  Removes an element from the set.

remove()	                              Removes the specified element.

symmetric_difference()	                Returns a set with the symmetric differences of two sets.

symmetric_difference_update()	          inserts the symmetric differences from this set and another.

union()	                                Return a set containing the union of sets.

update()	                              Update the set with the union of this set and others.




                              (16) PYTHON DICTIONARIES

*  Dictionaries are used to store data values in key:value pairs.
*  A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
*  Dictionaries are written with curly brackets, and have keys and values.

   Example :    thisdict = { "brand": "Ford","model": "Mustang","year": 1964}
                print(thisdict)                   O/p : {'brand': 'Ford', 'model': 'Mustang', 'year': 1964}

DICTIONARIES METHOD : 


    Method	                                    Description

1. clear()	                      Removes all the elements from the dictionary..

2. copy()	                        Returns a copy of the dictionary.

3. fromkeys()	                    Returns a dictionary with the specified keys and value.

4. get()                          Returns the value of the specified key.

5. items()	                      Returns a list containing a tuple for each key value pair.

6. keys()                         Returns a list containing the dictionary's keys.

7. pop()	                        Removes the element with the specified key.

8. popitem()	                    Removes the last inserted key-value pair.

9. setdefault()	                  Returns the value of the specified key. If the key does not exist: insert the key, with the specified value.

10. update()	                    Updates the dictionary with the specified key-value pairs.

11. values()                      Returns a list of all the values in the dictionary.


                    
              (17)  PYTHON IF .... ELSE.

* "if statement" is written by using the if keyword

     Python supports the usual logical conditions from mathematics.

                      1.  Equals: a == b
                      2.  Not Equals: a != b
                      3.  Less than: a < b
                      4.  Less than or equal to: a <= b
                      5.  Greater than: a > b
                      6.  Greater than or equal to: a >= b
Example :
           a = 33
           b = 200
            if b > a:
           print("b is greater than a")        # O/p : b is greater than a


* ELIF STATEMENT : 
              The elif keyword is Python's way of saying "if the previous conditions were not true, then try this condition.
Example : 
          a = 33
          b = 33
            if b > a:
         print("b is greater than a")
           elif a == b:
         print("a and b are equal")       # O/p: a and b are equal

* ELSE STATEMENT :
              The else keyword catches anything which isn't caught by the preceding conditions.
Example : 
          a = 200
          b = 33
            if b > a:
          print("b is greater than a")
            elif a == b:
          print("a and b are equal")
            else:
          print("a is greater than b")       # O/p : a is greater then b

* 

STATEMENT              DISTRACTION                                            EXAMPLE 

    AND              and keyword is a logical operator, 
                     and is used to combine conditional statements:            a = 200                # o/P : Both condition are true  
                                                                               b = 33
                                                                               c = 500
                                                                                if a > b and c > a:
                                                                                print("Both conditions are True")
                     

    OR              or keyword is a logical operator, 
                   and is used to combine conditional statements                    a = 200
                                                                                    b = 33             # O/p : At least one of the conditions is True.
                                                                                    c = 500
                                                                                    if a > b or a > c:
                                                                                      print("At least one of the conditions is True")
        

    NOT          not keyword is a logical operator, and is used to 
                 reverse the result of the conditional statement:                   a = 33
                                                                                    b = 200            # O/p : a is NOT greater than b
                                                                                    if not a > b:        
                                                                                      print("a is NOT greater than b")   



  PASS            if statements cannot be empty, but if you for some                                           
                  reason have an if statement with no content ,                      a=33                  
                  put in the pass statement to avoid getting an error.               b= 200                                    
                                                                                      if b > a :       # O/p :  having an empty if statement like this, would raise an error without the pass statement                               
                                                                                        pass  



                         (17) PYTHON LOOPS 

  Python has two primitive loop commands:

                                   ➪  while loops
                                   ➪  for loops

                         (18) WHILE LOOP : 

           the while loop we can execute a set of statements as long as a condition is true.
 Example : 
           i = 1                         # O/p : 1
          while i < 6:                           2
             print(i)                            3
          i += 1                                 4
                                                 5

*  THE CONTINUE STATEMENT : 
                               the continue statement we can stop the current iteration, and continue with the next.
Example : 
           i = 0                   # O/p : 0
           while i < 6:                    1
            i += 1                         2
           if i == 3:                      4
             continue                      5
           print(i)                        6

* THE BREAK STATEMENT :   
                        the break statement we can stop the loop even if the while condition is true .
Example : 
            i = 1                   # O/p :   1
            while i < 6:                      2
              print(i)                        3
              if i == 3:
                break
              i += 1

*  THE ELSE STATEMENT :
                           the else statement we can run a block of code once when the condition no longer is true.
Example :
            i = 1                                 # O/p :  1
          while  i < 6:                                    2
            print (i)                                      3
          i+=1                                             4
          else :                                           5
             print( " i is no longer less than 6")         i is no longer less than 6



                               (19)  FOR LOOP

* A (for) loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string) .
* (for) keyword in other programming languages, and works more like an iterator method as found 
  in other object-orientated programming languages.
* (for) loop we can execute a set of statements, once for each item in a list, tuple, set etc..
* The for loop does not require an indexing variable to set beforehand.

      Example : 

             fruits = ["apple", "banana", "cherry"]             # O/p :   apple
              for x in fruits:                                            banana
                print(x)                                                  cherry


 *  THE BREAK STATEMENT : 

        *  the break statement we can stop the loop before it has looped through all the items .

Example : 

        fruits = ["apple", "banana", "cherry"]         # O/p :  apple
        for x in fruits:                                        banana
          print(x)
          if x == "banana":
            break

*  THE CONTINUE STATEMENT :
                          * the continue statement we can stop the current iteration of the loop, and continue with the next.

Example : 
              fruits = ["apple", "banana", "cherry"]        # O/p :  apple
              for x in fruits:                                       cherry
                if x == "banana":
                  continue
                print(x)

* THE RANGE () FUNCTION : 

           * To loop through a set of code a specified number of times, we can use the range() function .
           * The range() function returns a sequence of numbers, starting from 0 by default ,  and ends at a specified number.
(1) Example : 
          for x in range(6):       # O/p : 0                         (2) Example :    for x in range(2, 30, 3):        O/p : 2 to 30 * values , 2 are defult 
             print(x)                      1                                           print(x) 
                                           2
                                           3
                                           4
                                           5
           # that range(6) is not the values of 0 to 6, but the values 0 to 5 .



* THE PASS STATEMENT : 
                        * for loops cannot be empty, but if you for some reason have a 
                          for loop with no content, put in the pass statement to avoid getting an error.

Example : 

            for x in [0, 1, 2]:          # O/p : having an empty for loop like this, would raise an error without the pass statement .
            pass



                            (20)  PYTHON FUNCTIONS 

    * A function is a block of code which only runs when it is called.
    * You can pass data, known as parameters, into a function.
    * A function can return data as a result.
    * Python a function is defined using the (def) keyword.
    * A parameter is the variable listed inside the parentheses in the function definition.
      An argument is the value that is sent to the function when it is called.
    * KEYWORD ARGUEMENT : You can also send arguments with the ( key = value syntax. )
                          This way the order of the arguments does not matter.
    * If we call the function without argument, it uses the default value example : def my_function(country = "Norway"):
    * To let a function return a value, use the return statement.

Example : 
          def my_function():
          print("Hello from a function")           # my_function is calling function .



                           (21)  PYTHON LAMBDA 

 * A lambda function is a small anonymous function.
 * A lambda function can take any number of arguments, but can only have one expression.
 * lambda arguments : expression.
 * Lambda functions can take any number of arguments.

Example : 
           x = lambda a, b : a * b          # O/p : 30
           print(x(5, 6))


                         (22) PYTHON ARRAYS

* Python does not have built-in support for Arrays, but (Python Lists)can be used instead.
* Arrays are used to store multiple values in one single variable.
* An array is a special variable, which can hold more than one value at a time.

Example :
              cars = ["Ford", "Volvo", "BMW"]        # O/p : ['Toyota', 'Volvo', 'BMW']
              cars[0] = "Toyota"
              print(cars)

ARRAY METHODS :

     
                Method	                     Description

             1. append()	     Adds an element at the end of the list.

             2. clear()	       Removes all the elements from the list.

             3. copy()	       Returns a copy of the list.

             4. count()	       Returns the number of elements with the specified value.

             5. extend()	     Add the elements of a list (or any iterable), to the end of the current list.

             6. index()	       Returns the index of the first element with the specified value.

             7. insert()       Adds an element at the specified position.

             8. pop()	         Removes the element at the specified position.

             9. remove()	     Removes the first item with the specified value.

             10. reverse()	   Reverses the order of the list.

             11. sort()	       Sorts the list.


                (23)  PYTHON CLASSES AND OBJECTS

    *  Python is an object oriented programming language.
    *  Almost everything in Python is an object, with its properties and methods.
    *  A Class is like an object constructor, or a "blueprint" for creating objects.
    *  To create a class, use the keyword (class).
    *  You can delete properties on objects by using the (del) keyword .

The __init__() Function :   * To understand the meaning of classes we have to understand the built-in __init__() function.
                            * All classes have a function called __init__(), which is always executed when the class is being initiated.
                            * The __init__() function is called automatically every time the class is being used to create a new object.

The __str__() Function :  * The __str__() function controls what should be returned when the class object is represented as a string.
                          * If the __str__() function is not set, the string representation of the object is returned .

OBJECT METHODS :
                  *  Objects can also contain methods. Methods in objects are functions that belong to the object.
                  *  Let us create a method in the Person class .

THE SELF PARAMETER :
                     * The self parameter is a reference to the current instance of the class, 
                       and is used to access variables that belongs to the class.
                     * It does not have to be named self , you can call it whatever you like, 
                        but it has to be the first parameter of any function in the class.


                      (24) PYTHON INHERITANCE

  *  Inheritance allows us to define a class that inherits all the methods and properties from another class.
  *  Parent class is the class being inherited from, also called base class.
  *  Child class is the class that inherits from another class, also called derived class.
  *  CREATE A PARENT CLASS : Any class can be a parent class, so the syntax is the same as creating any other class .
  *  CREATE A CHILD CLASS : To create a class that inherits the functionality from another class, 
                            send the parent class as a parameter when creating the child class.
Example (1) :

                class Person:
                  def __init__(self, fname, lname):             # O/p : Jhon Doe
                    self.firstname = fname
                    self.lastname = lname
                
                  def printname(self):
                    print(self.firstname, self.lastname)
                
                #Use the Person class to create an object, and then execute the printname method:
                
                x = Person("John", "Doe")
                x.printname()

Example (2) :       A method called welcome to the Student class :

               class Student(Person):
                def __init__(self, fname, lname, year):             # O/p : Welcome Mike Olsen to the class of 2019
                  super().__init__(fname, lname)
                  self.graduationyear = year
              
                def welcome(self):
                  print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)



                           (25)  PYTHON ITERATOR 

*  An iterator is an object that contains a countable number of values.
*  An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.
*  Technically in Python, an iterator is an object which implements the iterator protocol, 
   which consist of the methods __iter__() and __next__() .
*  We can also use a for loop to iterate through an iterable object .
*  To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object .

 ITERATOR Vs ITERABLE :

* Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.
* All these objects have a iter() method which is used to get an iterator .

Example :    Stop after 20 iterations :

       class MyNumbers:
        def __iter__(self):
          self.a = 1
          return self
      
        def __next__(self):
          if self.a <= 20:                 # O/p :  1
            x = self.a                              2
            self.a += 1                             3
            return x                                .
          else:                                     .
            raise StopIteration                     20...
      
      myclass = MyNumbers()
      myiter = iter(myclass)
      
      for x in myiter:
        print(x)



                                 (26) PYTHON ITERATORS 

*  An iterator is an object that contains a countable number of values .
*  in Python, an iterator is an object which implements the iterator protocol,
   which consist of the methods __iter__() and __next__(). 
  ITERABLE :  Lists, tuples, dictionaries, and sets are all iterable objects..
               They are iterable containers which you can get an iterator from.
  ITERATOR :  All these objects have a iter() method which is used to get an iterator .
*  Even strings are iterable objects, and can return an iterator .
*  Looping Through an Iterator : >  We can also use a for loop to iterate through an iterable object .
                                 >  The for loop actually creates an iterator object and executes the next() method for each loop.

*  To create an object/class as an iterator you have to implement the methods __iter__() and __next__() to your object .

Example : 

       class MyNumbers:
        def __iter__(self):
          self.a = 1                          # O/p ;  1
          return self                                  2
                                                       3
        def __next__(self):                            4
          x = self.a                                   5
          self.a = 1              
          return x
      
      myclass = MyNumbers()
      myiter = iter(myclass)
      
      print(next(myiter))
      print(next(myiter))
      print(next(myiter))
      print(next(myiter))
      print(next(myiter))

 StopIteration : > The example above would continue forever if you had enough next() statements, or if it was used in a for loop.
                  > To prevent the iteration from going on forever, we can use the StopIteration statement.


                                      (27) PYHON POLYMORPHISM

 *  The word "polymorphism" means "many forms", and in programming it refers to methods/functions/operators with the 
    same name that can be executed on many objects or classes.

FUNCTION POLYMORPHISM : An example of a Python function that can be used on different objects is the len() function .

          STRING                                                      TUPLE                                             DICTIONARY

*   For strings len() returns the number of           * For tuples len() returns the number of items              * For dictionaries len() returns the number of key/value pairs 
    characters:                                         in the tuple .                                              in the dictionary.

*  Example :   x = "Hello World!"  O/p: 12            *  Example :  mytuple = ("apple", "banana", "cherry")       * Example :  thisdict = { "brand": "Ford", "model": "Mustang","year": 1964 }
               print(len(x))                                        print(len(mytuple))        O/p; 3                          print(len(thisdict))           O/p ; 3 


CLASS POLYMORPHISM :  Polymorphism is often used in Class methods, where we can have multiple classes with the same method name.



                                  (28) PYTHON SCOPE 

*  A variable is only available from inside the region it is created. This is called scope.
  LOCAL SCOPE : A variable created inside a function belongs to the local scope of that function, 
                 and can only be used inside that function .
Example :
             def myfunc():       # O/p; 300
              x = 300
              print(x)
            
             myfunc()

 GLOBAL SCOPE : * A variable created in the main body of the Python code is a global variable and belongs to the global scope.
                   Global variables are available from within any scope, global and local .

Example :
                 A variable created outside of a function is global and can be used by anyone:
      x = 300
      def myfunc():
        print(x)
      myfunc()
      print(x)

  NAMING VARIABLE :
  
  If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables,
  one available in the global scope (outside the function) and one available in the local scope (inside the function)

Example : The function will print the local x, and then the code will print the global x ?

        x = 300
        def myfunc():      # O/p ; 300
          x = 200                  200
          print(x)
        myfunc()
        print(x)

 GLOBAL KEYWORD :

 *  If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.
    The global keyword makes the variable global.

*  Also, use the global keyword if you want to make a change to a global variable inside a function.

Example : If you use the global keyword, the variable belongs to the global scope ?

        def myfunc():
          global x            # O/p : 300
          x = 300
        myfunc()
        print(x)


                          (29) PYHTON MODULES

*  Consider a module to be the same as a code library. 
*  A file containing a set of functions you want to include in your application.
  CREATE A MODULE : To create a module just save the code you want in a file with the file extension( .py ).
  USE A MODULE :  Now we can use the module we just created, by using the import statement .
*  When using a function from a module, use the syntax : module_name.function_name.
  VARIABLES IN MODULE : The module can contain functions, as already described, 
                         but also variables of all types (arrays, dictionaries, objects etc) ..
  NAMING A MODULE : You can name the module file whatever you like, but it must have the file extension .py
  RE-NAMING A MODULE : You can create an alias when you import a module, by using the as keyword .
  BUILT - IN MODULES : There are several built-in modules in Python, which you can import whenever you like .
  USING THE dir() FUNCTION : There is a built-in function to list all the function names (or variable names) in a module. 
                              The dir() function.
*  The dir() function can be used on all modules, also the ones you create yourself. 
  IMPORT FROM THE MODULE : You can choose to import only parts from a module, by using the from keyword.


Example 1 ; List all the defined names belonging to the platform module:

    import platform                # O/p : ['DEV_NULL', '_UNIXCONFDIR', 'WIN32_CLIENT_RELEASES',....etc ]
    x = dir(platform)
    print(x)


                            (30) PYHTON DATE & TIME 

* A date in Python is not a data type of its own, but we can import a module named (datetime)
  to work with dates as date objects.

Example ;  Import the datetime module and display the current date:

    import datetime                    # O/p ; 19:52 31-08-2023
    x = datetime.datetime.now()
    print(x)

 DATE OUTPUT : 
                 * When we execute the code from the example above the result will be:
                       > ( 2023-08-31 19:49:38.424262 )
                 * The date contains year, month, day, hour, minute, second, and microsecond.

 CREATING DATE OBJECT : 
                        *  To create a date, we can use the datetime() class (constructor) of the datetime module.
                           The datetime() class requires three parameters to create a date: year, month, day.

Example : Create a date object ?

        import datetime                           # O/p : 2020-05-17 00:00:00
        x = datetime.datetime(2020, 5, 17)
        print(x)

 THE strftime() METHOD :
            * The datetime object has a method for formatting date objects into readable strings.
            * The method is called strftime(), and takes one parameter, format, to specify the format of the returned string. 


Directive	                          Description	                                                                 Example	


%a                        	Weekday, short version	                                                               Wed	

%A	                        Weekday, full version	                                                               Wednesday

%w	                        Weekday as a number 0-6, 0 is Sunday	                                                  3	

%d	                        Day of month 01-31	                                                                    31	

%b	                        Month name, short version	                                                              Dec	

%B	                        Month name, full version	                                                            December

%m	                        Month as a number 01-12	                                                                 12	

%y	                        Year, short version, without century                                                     18	

%Y	                        Year, full version                                                                      2018	

%H	                        Hour 00-23	                                                                             17	

%I	                        Hour 00-12	                                                                             05	

%p	                        AM/PM                                                                                    PM	

%M	                        Minute 00-59	                                                                           41	

%S	                        Second 00-59	                                                                           08	

%f	                        Microsecond 000000-999999	                                                             548513	

%z	                        UTC offset	                                                                           +0100	

%Z	                        Timezone	                                                                               CST	

%j	                        Day number of year 001-366	                                                             365	

%U	                        Week number of year, Sunday as the first day of week, 00-53	                             52	

%W	                        Week number of year, Monday as the first day of week, 00-53	                             52	

%c                        	Local version of date and time	                                               Mon Dec 31 17:41:00 2018	

%C	                        Century	                                                                                 20	

%x	                        Local version of date	                                                                12/31/18

%X	                        Local version of time	                                                                17:41:00	

%%                         	A % character                                                                           	%	

%G	                        ISO 8601 year	                                                                          2018	

%u	                        ISO 8601 weekday (1-7)	                                                                  1	

%V	                        ISO 8601 weeknumber (01-53)	                                                             01



                                       (31) PYTHON MATH

*  Python has a set of built-in math functions, including an extensive math module, that allows you to perform 
   mathematical tasks on numbers.

*  The abs() function returns the absolute (positive) value of the specified number.

*  The pow(x, y) function returns the value of x to the power of y (xy).

        Example : Return the value of 4 to the power of 3 (same as 4 * 4 * 4) ?

                      x = pow(4, 3)        # O/p : 64
                       print(x)


 BUILT- IN MATH FUNCTION : 
        
          * Python has a set of built-in math functions, including an extensive math module, that allows you to 
            perform mathematical tasks on numbers.
Example :
            x = min(5, 10, 25)
            y = max(5, 10, 25)          # O/p :  25
            print(x)                             5
            print(y)

 THE MATH MADULE

  *  Python has also a built-in module called math, which extends the list of mathematical functions.
  *  To use it, you must import the math module.
           [  import math ]
  *  When you have imported the math module, you can start using methods and constants of the module.
     The ( math.sqrt() ) method for example, returns the square root of a number.
  *  The math.pi constant, returns the value of PI (3.14...) .
  *  The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method 
     rounds a number downwards to its nearest integer, and returns the result.


                             (32) PYTHON JSON 

*  JSON is a syntax for storing and exchanging data.
*  JSON is text, written with JavaScript object notation.
*  Python has a built-in package called json, which can be used to work with JSON data .
*  If you have a JSON string, you can parse it by using the json.loads() method. >>> The result will be python dictionary.
*  CONVERT FROM PYTHON TO JSON :  


CONVERT FROM PYTHON TO JSON :

             If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.
Example :

            import json
            # a Python object (dict):
            x = {
              "name": "John",
              "age": 30,
              "city": "New York"
            }
            # convert into JSON:
            y = json.dumps(x)
            # the result is a JSON string:
            print(y)


You can convert Python objects of the following types, into JSON strings :

          1. dict
          2. list
          3. tuple
          4. string
          5. int
          6. float
          7. True
          8. False
          9. None


         Python	        JSON

    1.    dict	       Object
    2.    list	       Array
    3.    tuple        Array
    4.    str	         String
    5.    int	         Number
    6.    float	       Number
    7.    True	       true
    8.    False	       false
    9.    None	       null

  FORMAT THE RESULT :

          *  The json.dumps() method has parameters to make it easier to read the result.
          *  You can also define the separators, default value is (", ", ": ") .

  ORDER THE RESULT :
                        * The json.dumps() method has parameters to order the keys in the result.
       #  sort the result alphabetically by keys.


                              (33) PYTHON REGex

*  A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.
*  RegEx can be used to check if a string contains the specified search pattern.

 REGex in PYTHON : When you have imported the re module, you can start using regular expressions .

 REGex FUNCTIONS :
              The re module offers a set of functions that allows us to search a string for a match.

   Function	                       Description

1. findall	          Returns a list containing all matches
2. search	            Returns a Match object if there is a match anywhere in the string
3. split	            Returns a list where the string has been split at each match
4. sub	              Replaces one or many matches with a string


 METACHARACTERS :


   Character	                        Description	                                                                Example	


1.    []	                A set of characters                                                                   	"[a-m]"	

2.    \	                  Signals a special sequence (can also be used to escape special characters)              	"\d"	

3.    .	                  Any character (except newline character)                                              	"he..o"	

4.    ^                  	Starts with                                                                           	"^hello"	

5.    $	                  Ends with	                                                                              "planet$"	

6.    *	                  Zero or more occurrences	                                                               "he.*o"	

7.    +	                  One or more occurrences	                                                                  "he.+o"	

8.    ?	                  Zero or one occurrences                                                                  	"he.?o"	

9.   {}	                  Exactly the specified number of occurrences	                                              "he.{2}o"	

10.   |	                  Either or	                                                                              "falls|stays"	

11.   ()	                Capture and group	 	 


 SPECIAL SEQUENCES

        * A special sequence is a \ followed by one of the characters in the list below, and has a special meaning .
 Example :
            1.   \ A
            2.   \ b
            3.   \ B
            4.   \ d
            5.   \ D
            6.   \ s
            7.   \ S
            8.   \ w
            9.   \ W
           10.   \ Z

  SETS 

        * A set is a set of characters inside a pair of square brackets [] with a special meaning .
  Example : 
              1. [ arn ]
              2. [ a-n ]
              3. [ ^arn ]
              4. [ 0123 ]
              5. [ 0-9 ]
              6. [ 0-5 ] [ 0-9 ]
              7. [ a-z A-z ]
              8. [ + ]

 THE FINDALL () FUNCTION
               *  The findall() function returns a list containing all matches.
               *  The list contains the matches in the order they are found.
               *  If no matches are found, an empty list is returned.

 THE SEARCH () FUNCTION : 
              * The search() function searches the string for a match, and returns a Match object if there is a match.
                If there is more than one match, only the first occurrence of the match will be returned.
              * If no matches are found, the value( None ) is returned .

 THE SPILT() FUNCTION 
                    * The split() function returns a list where the string has been split at each match .
                    * You can control the number of occurrences by specifying the maxsplit parameter .

 THE SUB() FUNCTION 
                    * The sub() function replaces the matches with the text of your choice.
                    * Replace all white-space characters .
                    * You can control the number of replacements by specifying the count parameter.

 MATCH OBJECT 
                  *  A Match Object is an object containing information about the search and the result.
                  *  If there is no match, the value None will be returned, instead of the Match Object.
                  *   If there is no match, the value None will be returned, instead of the Match Object .

The Match object has properties and methods used to retrieve information about the search, and the result:

          1.     .span()            returns a tuple containing the start-, and end positions of the match.
          2.     .string            returns the string passed into the function
          3.     .group()           returns the part of the string where there was a match



                                          (34) PYTHON PIP

*  PIP is a package manager for Python packages, or modules if you like.
*  If you have Python version 3.4 or later, PIP is included by default.

  PACKAGE : *  PIP is a package manager for Python packages, or modules if you like.
             *  If you have Python version 3.4 or later, PIP is included by default.

* Navigate your command line to the location of Python's script directory, and type the following .
          C:\Users\Your Name\AppData\Local\Programs\Python\Python36-32\Scripts>pip --version

 INSTALL PIPE : If you do not have PIP installed, you can download and install it from this page: https://pypi.org/project/pip/ .

 DOWNLOAD A PACKAGE : *  Downloading a package is very easy.

                       *  Open the command line interface and tell PIP to download the package you want.
                       *  Navigate your command line to the location of Python's script directory, and type the following.
  [ C:\Users\Your Name\AppData\Local\Programs\Python\Python36-32\Scripts>pip install camelcase ]

 USING A PACKAGE  : * Once the package is installed, it is ready to use.
                     * Import the "camelcase" package into your project.

Example :  Import and use "camelcase"?

              import camelcase
              c = camelcase.CamelCase()
              txt = "lorem ipsum dolor sit amet"
              print(c.hump(txt) 

#This method capitalizes the first letter of each word.


  FIND MORE PACKAGE : 
                         Find more packages at https://pypi.org/.


                         (36) PYTHON TRY... EXCEPT

*  The try block lets you test a block of code for errors.
*  The except block lets you handle the error.
*  The else block lets you execute code when there is no error.
*  The finally block lets you execute code, regardless of the result of the try- and except blocks.

EXPECTION HANDLING 

          *  When an error occurs, or exception as we call it, Python will normally stop and generate an error message.
             These exceptions can be handled using the (try) statement .
          *  Since the try block raises an error, the except block will be executed.
          *  Without the try block, the program will crash and raise an error.

MANY EXCEPTION :  You can define as many exception blocks as you want, e.g. 
                  if you want to execute a special block of code for a special kind of error

ELSE : You can use the else keyword to define a block of code to be executed if no errors were raised .
         #The try block does not raise any errors, so the else block is executed .

FINALLY : The finally block, if specified, will be executed regardless if the try block raises an error or not.

RAISE AN EXCEPTION :  *  As a Python developer you can choose to throw an exception if a condition occurs.
                         To throw (or raise) an exception, use the raise keyword.
                      *  The raise keyword is used to raise an exception.


                                      (37) PYTHON USER INPUT 

USER INPUT : 

        Python allows for user input.

> That means we are able to ask the user for input.
> The method is a bit different in Python 3.6 than Python 2.7.
> Python 3.6 uses the input() method.
> Python 2.7 uses the raw_input() method.

example ;

PYTHON 3.6 :  

              username = input("Enter username:")        # o/P : Enter username :
              print("Username is: " + username)

> Python stops executing when it comes to the input() function, and continues when the user has given some input.


                                  (38) PYTHON STRING FORMATTING 

*  To make sure a string will display as expected, we can format the result with the format() method.
  STRING FORMATING :   >   he format() method allows you to format selected parts of a string.
                        >  Sometimes there are parts of a text that you do not control, maybe they come from a database,
                           or user input?
                        >  To control such values, add placeholders (curly brackets {}) in the text, and run the values
                           through the format() method .

Example : 

 Add a placeholder where you want to display the price:

      price = 49                                 # O/p : The price is 49 dollars
      txt = "The price is {} dollars"
      print(txt.format(price))
*  You can add parameters inside the curly brackets {} to specify how to convert the value.

  MULTIPLE VALUES :  *  If you want to use more values, just add more values to the format() method:
                         
                            print(txt.format(price, itemno, count))

  INDEX NUMBERS : You can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the
                  correct placeholders .
Example : 

      age = 36                                     # O/p : His name is John. John is 36 years old.
      name = "John"
      txt = "His name is {1}. {1} is {0} years old."
      print(txt.format(age, name))

 NAMED INDEXES

       *  You can also use named indexes by entering a name inside the curly brackets {carname}, 
          but then you must use names when you pass the parameter values txt.format(carname = "Ford").

Example :
            myorder = "I have a {carname}, it is a {model}."                # O/p : I have a Ford, it is a Mustang.
            print(myorder.format(carname = "Ford", model = "Mustang"))
